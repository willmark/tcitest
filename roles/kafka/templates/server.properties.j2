# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################
# reassign partitions automatically
auto.leader.rebalance.enable={{ kafka_auto_leader_rebalance_enable }}
auto.create.topics.enable=true

# minimum number of in sync replicas that should be sync before ack is returned to producers
min.insync.replicas= {{ kafka_min_insync_replicas }}

# The id of the broker. This must be set to a unique integer for each broker.
broker.id={{ hostvars[inventory_hostname]['id'] }}

############################# Socket Server Settings #############################

# The port the socket server listens on
port={{ kafka_port }}

# Hostname the broker will bind to. If not set, the server will bind to all interfaces
#host.name=localhost
host.name={{ hostvars[inventory_hostname]['ansible_'~hostvars[inventory_hostname].ansible_interfaces[2]]['ipv4']['address'] }}

# Hostname the broker will advertise to producers and consumers. If not set, it uses the
# value for "host.name" if configured.  Otherwise, it will use the value returned from
# java.net.InetAddress.getCanonicalHostName().
#advertised.host.name={{ hostvars[inventory_hostname]['ansible_nodename'] }}

# The port to publish to ZooKeeper for clients to use. If this is not set,
# it will publish the same port that the broker binds to.
#advertised.port={{ kafka_port }}

#default.replication.factor=3
default.replication.factor={{ kafka_default_replication_factor }}

# The number of threads handling network requests
num.network.threads= {{ kafka_num_network_threads }}
 
# The number of threads doing disk I/O
num.io.threads={{ kafka_num_io_threads }}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes={{ kafka_socket_send_buffer_bytes }}

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes={{ kafka_socket_receive_buffer_bytes }}

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes={{ kafka_socket_request_max_bytes }}


############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs={% for disk in ansible_mounts if disk.mount | match("/disk/*") %}{{ disk.mount }}{{ kafka_log_dir }}{% if not loop.last %},{% endif %}{% else %}{{ kafka_log_dir }}{%- endfor %}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions={{ kafka_default_number_partitions }}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk. 
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks. 
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
log.flush.interval.messages={{ kafka_log_flush_interval_messages }}

# The maximum amount of time a message can sit in a log before we force a flush
log.flush.interval.ms={{ kafka_log_flush_interval_ms }}

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours={{ kafka_default_log_retention_hours }}

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes.
log.retention.bytes={{ kafka_log_retention_bytes }}

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{ kafka_log_segment_bytes }}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.cleanup.interval.mins={{ kafka_log_cleanup_interval_mins }}

# The interval at which log segments are checked to see if they can be deleted according 
# to the retention policies
log.retention.check.interval.ms={{ kafka_log_retention_check_interval_ms }}

# By default the log cleaner is disabled and the log retention policy will default to just delete segments after their retention expires.
# If log.cleaner.enable=true is set the cleaner will be enabled and individual logs can then be marked for log compaction.
#log.cleaner.enable=false

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect={% for server in groups[group_names[group_name_index]] %}{{ hostvars[server]['ansible_'~hostvars[server].ansible_interfaces[2]]['ipv4']['address'] }}:{{ zookeeper_client_port }}{% if not loop.last %},{% endif %}{% endfor %}


# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms={{ zookeeper_connection_timeout_ms }}
