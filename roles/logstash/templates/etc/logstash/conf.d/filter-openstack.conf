# {{ ansible_managed }}

if [type] == "openstack" {
    grok {
      # Do multiline matching as the above mutliline filter may add newlines
      # to the log messages.
      # TODO move the LOGLEVELs into a proper grok pattern.
      patterns_dir => "/etc/logstash/patterns"

      match => { "message" => "^%{OPENSTACK_DATE:timestamp}%{SPACE}%{NUMBER:pid}?%{SPACE}?(?<loglevel>AUDIT|CRITICAL|DEBUG|INFO|TRACE|WARNING|ERROR)%{SPACE}%{NOTSPACE:module}%{SPACE}\[%{NOTSPACE:context}\]%{SPACE}?%{GREEDYDATA:message}?" }
      overwrite => ["message"]
      add_field => { "received_at" => "%{@timestamp}" }
    }

    date {
      match => [ "timestamp", "YYY-MM-dd HH:mm:ss.SSSSSS" ]
      remove_field => "timestamp"
      timezone => "UTC"
    }

    if "keystone-api" in [tags] {
       mutate {
            gsub => ['message',"\"",""]
       }
       grok {
          match => { "message" => "%{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} %{NUMBER:response} %{NUMBER:bytes} %{NUMBER:seconds}" }
          add_tag => ["apimetrics"]
       }
    } else if "nova-api" in [tags] {
       if [module] == "nova.osapi_compute.wsgi.server" {
         mutate {
              gsub => ['message',"\"",""]
         }
         grok {
            match => { "message" => "%{NOTSPACE:requesterip} %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} status\: %{NUMBER:response} len\: %{NUMBER:bytes} time\: %{NUMBER:seconds}" }
            add_tag => ["apimetrics"]
         }
       }
    } else if "neutron-api" in [tags] {
       if [module] == "neutron.wsgi" {
         if "accepted" not in [message] {
           mutate {
                gsub => ['message',"\"",""]
           }
           grok {
              match => { "message" => "%{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} %{NUMBER:response} %{NUMBER:bytes} %{NUMBER:seconds}" }
              add_tag => ["apimetrics"]
           }
         }
       }
    } else if "glance-api" in [tags] {
       if [module] == "glance.wsgi.server" {
         mutate {
              gsub => ['message',"\"",""]
         }
         grok {
            match => { "message" => "%{NOTSPACE:requesterip} \- \- \[%{NOTSPACE:req_date} %{NOTSPACE:req_time}\] %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} %{NUMBER:response} %{NUMBER:bytes} %{NUMBER:seconds}" }
            add_tag => ["apimetrics"]
         }
       }
    } else if "novameta-api" in [tags] {
       mutate {
            gsub => ['message',"\"",""]
       }
       if [module] == "nova.api.ec2" {
         grok {
            match => { "message" => "%{NUMBER:seconds}s %{NOTSPACE:requesterip} %{NOTSPACE:method} %{NOTSPACE:url_path} None\:None %{NUMBER:response} %{GREEDYDATA:user_agent}" }
            add_field => ["api", "metadata-ec2"]
            add_tag => ["apimetrics"]
         }
       } else if [module] == "nova.metadata.wsgi.server" {
         grok {
            match => { "message" => "%{NOTSPACE:requesterip} %{NOTSPACE:method} %{NOTSPACE:url_path} %{NOTSPACE:http_ver} status\: %{NUMBER:response} len\: %{NUMBER:bytes} time\: %{NUMBER:seconds}" }
            add_tag => ["apimetrics"]
         }
       }
    }
  } else if "libvirt" in [tags] {
    grok {
       match => { "message" => "(?m)^%{TIMESTAMP_ISO8601:logdate}:%{SPACE}%{NUMBER:code}:?%{SPACE}\[?\b%{NOTSPACE:loglevel}\b\]?%{SPACE}?:?%{SPACE}\[?\b%{NOTSPACE:module}\b\]?%{SPACE}?%{GREEDYDATA:message}?" }
       add_field => { "received_at" => "%{@timestamp}"}
    }
    mutate {
       uppercase => [ "loglevel" ]
    }
  }
