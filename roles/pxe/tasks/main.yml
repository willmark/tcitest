---
- name: install pxe prereqs
  apt: pkg={{ item }} state=installed
  with_items:
    - tftp
    - syslinux
    - syslinux-common

- name: create tftpboot
  file: path={{ pxe.tftpboot_path }}
        state=directory
        owner=dnsmasq
        mode=0755

- name: create the pxelinux.cfg directory
  file: path={{ pxe.tftpboot_path }}/pxelinux.cfg
        mode=0755
        state=directory

- name: copy files to tftpboot
  command: creates="{{ pxe.tftpboot_path }}/{{ item }}" cp /usr/lib/syslinux/{{ item }} {{ pxe.tftpboot_path }}/
  with_items:
    - pxelinux.0
    - vesamenu.c32
    - memdisk
    - reboot.c32
    - poweroff.com

- name: os tftp paths
  file: dest="{{ pxe.tftpboot_path }}/{{ item.name }}" mode=0755 state=directory
  with_items: "{{ pxe.os }}"

- include: microservice.yml
  when: cleversafe.enabled|default("False")|bool
  tags: microservice

- name: microservice directories
  file: dest="/opt/clev_microservice/{{ item.name }}" mode=0755 state=directory
  with_items: "{{ pxe.os }}"
  when: cleversafe.enabled|default("False")|bool

- name: microservice paths
  file: dest="/opt/clev_microservice/{{ item.os }}/{{ item.name }}" mode=0755 state=directory
  with_items: "{{ pxe.servers }}"
  when: cleversafe.enabled|default("False")|bool

- name: microservice devices dictionary
  template: src=opt/clev_microservice/devices.json
            dest=/opt/clev_microservice/devices.json
  with_items: "{{ pxe.servers }}"
  notify: restart microservice
  when: cleversafe.enabled|default("False")|bool

- name: server preseeds
  file: dest="{{ pxe.tftpboot_path }}/servers" mode=0755 state=directory
  when: not cleversafe.enabled|default("False")|bool

- name: delete kernel if updating
  file:
    path: "{{ pxe.tftpboot_path }}/{{ item.name }}/vmlinuz"
    state: absent
  with_items: "{{ pxe.os }}"
  when: pxe_update_files

- name: delete bootloader if updating
  file:
    path: "{{ pxe.tftpboot_path }}/{{ item.name }}/initrd.img"
    state: absent
  with_items: "{{ pxe.os }}"
  when: pxe_update_files

- name: delete cleversafe fs if updating
  file:
    path: "/opt/clev_microservice/{{ item.name }}/filesystem.squashfs"
    state: absent
  with_items: "{{ pxe.os }}"
  when: pxe_update_files

- name: download kernel
  get_url: url={{ item.kernel }}
           dest={{ pxe.tftpboot_path }}/{{ item.name }}/vmlinuz mode=0644
  with_items: "{{ pxe.os }}"
  when: proxy_env is not defined

- name: download bootloader
  get_url: url={{ item.bootloader }}
           dest={{ pxe.tftpboot_path }}/{{ item.name }}/initrd.img mode=0644
  with_items: "{{ pxe.os }}"
  when: proxy_env is not defined

- name: download cleversafe filesystems
  get_url: url={{ item.filesystem }}
           dest=/opt/clev_microservice/{{ item.name }}/filesystem.squashfs mode=0644
           timeout={{ item.timeout|default(omit) }}
  with_items: "{{ pxe.os }}"
  when: cleversafe.enabled|default("False")|bool

- name: download kernel via proxy
  get_url: url={{ item.kernel }}
           dest={{ pxe.tftpboot_path }}/{{ item.name }}/vmlinuz mode=0644
  with_items: "{{ pxe.os }}"
  environment: proxy_env
  when: proxy_env is defined

- name: download bootloader via proxy
  get_url: url={{ item.bootloader }}
           dest={{ pxe.tftpboot_path }}/{{ item.name }}/initrd.img mode=0644
  with_items: "{{ pxe.os }}"
  environment: proxy_env
  when: proxy_env is defined

- name: download cleversafe filesystems
  get_url: url={{ item.filesystem }}
           dest=/opt/clev_microservice/{{ item.name }}/filesystem.squashfs mode=0644
           timeout={{ item.timeout|default(omit) }}
  with_items: "{{ pxe.os }}"
  environment: proxy_env
  when: cleversafe.enabled|default("False")|bool and proxy_env is defined

- name: os preseeds
  template: src=tftpboot/os/{{ item.preseed|default("default_preseed.cfg") }}
            dest={{ pxe.tftpboot_path }}/{{ item.name }}/preseed.cfg
  with_items: "{{ pxe.os }}"
  when: not cleversafe.enabled|default("False")|bool

- name: create default tftp boot menu
  template: src=tftpboot/pxelinux.cfg/default
            dest={{ pxe.tftpboot_path }}/pxelinux.cfg/default

- name: create per machine tftp boot files
  template: src=tftpboot/pxelinux.cfg/server
            dest={{ pxe.tftpboot_path }}/pxelinux.cfg/01-{{ item.mac | replace(":","-") | lower }}
  with_items: "{{ pxe.servers }}"
  notify: restart microservice
  when: pxe_files|default("false")|bool

- name: remove per machine tftp boot files when applicable
  file: path={{ pxe.tftpboot_path }}/pxelinux.cfg/01-{{ item.mac | replace(":","-") | lower }}
        state=absent
  with_items: "{{ pxe.servers }}"
  notify: restart microservice
  when: not pxe_files|default("false")|bool

- name: create per machine preseeds
  template: src=tftpboot/os/{{ item.preseed|default("default_preseed.cfg") }}
            dest={{ pxe.tftpboot_path }}/servers/{{ item.mac | replace(":","-") | lower }}.cfg
  with_items: "{{ pxe.servers }}"
  when: pxe_files|default("false")|bool and not cleversafe.enabled|default("False")|bool

- name: create per appliance answers file
  template: src=opt/clev_microservice/answers.cfg
            dest=/opt/clev_microservice/{{ item.os }}/{{ item.name}}/answers.cfg
  with_items: "{{ pxe.servers }}"
  when: cleversafe.enabled|default("False")|bool

- name: remove per machine preseeds when applicable
  file: path={{ pxe.tftpboot_path }}/servers/{{ item.mac | replace(":","-") | lower }}.cfg
        state=absent
  with_items: "{{ pxe.servers }}"
  when: not pxe_files|default("false")|bool and not cleversafe.enabled|default("False")|bool

- name: create default post install script
  template: src=tftpboot/os/post_install.sh
            dest={{ pxe.tftpboot_path }}/servers/default_post.sh
  with_items:
    - none
  when: not cleversafe.enabled|default("False")|bool

- name: create per machine post install scripts
  template: src=tftpboot/os/post_install.sh dest={{ pxe.tftpboot_path }}/servers/{{ item.mac | replace(":","-") | lower }}_post.sh
  with_items: "{{ pxe.servers }}"
  when: pxe_files|default("false")|bool and not cleversafe.enabled|default("False")|bool

- name: create per machine post install scripts
  template: src=tftpboot/os/post_install.sh
            dest={{ pxe.tftpboot_path }}/servers/{{ item.mac | replace(":","-") | lower }}_post.sh
  with_items: "{{ pxe.servers }}"
  when: pxe_files|default("false")|bool and not cleversafe.enabled|default("False")|bool

- name: remove per machine post install scripts when applicable
  file: path={{ pxe.tftpboot_path }}/servers/{{ item.mac | replace(":","-") | lower }}_post.sh
        state=absent
  with_items: "{{ pxe.servers }}"
  when: not pxe_files|default("false")|bool and not cleversafe.enabled|default("False")|bool

- name: create tftp config
  template: src=etc/dnsmasq.d/pxeboot.conf dest=/etc/dnsmasq.d/pxeboot.conf
  notify: restart dnsmasq

- meta: flush_handlers

- name: ensure dnsmasq service is running
  service: name=dnsmasq state=started enabled=yes

- name: install dnsmasq process check
  sensu_process_check: service=dnsmasq
  notify: restart sensu-client missing ok
  when: not cleversafe.enabled|default("False")|bool

- name: allow ipv4 forwarding
  command: echo 1 > /proc/sys/net/ipv4/ip_forward
  when: pxe.nat.enabled|bool

- name: Do not enforce forwarding rules with UFW
  lineinfile: dest=/etc/default/ufw regexp="^DEFAULT_FORWARD_POLICY"
              line="DEFAULT_FORWARD_POLICY=\"ACCEPT\""
  when: pxe.nat.enabled|bool
  notify: reload ufw
  tags:
    - firewall

# this is not idempotent,  but is only expected to be needed on short lived
# mini bootstrappers
- name: enable NAT on correct interface
  command: /sbin/iptables --table nat -A POSTROUTING -o {{ pxe.nat.interface_out }} -j MASQUERADE
  when: pxe.nat.enabled|bool

- name: enable forwarding on correct interface
  command: /sbin/iptables --append FORWARD --in-interface {{ pxe.nat.interface_in }} -j ACCEPT
  when: pxe.nat.enabled|bool

- name: permit access to tftpd
  ufw: rule=allow port=69 proto=udp
       to_ip="{{ item }}"
  with_items:
    - "{{ pxe.tftp_server }}"
  tags:
    - firewall

- name: permit access to dhcp
  ufw: rule=allow to_port=67
       direction=in interface="{{ pxe.pxe_interface }}"
  # from_port=68 proto=udp
  tags:
    - firewall

- include: serverspec.yml
  when: serverspec.enabled|default("True")|bool
  tags: serverspec
